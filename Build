#!/usr/bin/env bash

set -e      # Exit immediately if any command fails
set -u      # Using undefined variables is an error. Exit immediately

# Utilities
# ---------

progress() { echo "== $@"; }
warning()  { echo -e "WARNING:" "$@"; }
die()      { echo -e "FATAL:" "$@"; exit 1; }

success()  { echo -e "\e[32m== success: $@\e[0m";
             echo "$@" >> "$now_passing"
           }
failure()  { echo -e "\e[31m== failure: $@\e[0m"; }

pretty_diff() {
    if type colordiff >/dev/null 2>&1; then
        colordiff -u "$@"
    else
        diff -u "$@"
    fi
}

lint_krun_uiuck() {
    # Format, &gt; entity > and make each K task start on a new line
    xmllint -format - | sed -e 's/&gt;/>/g'  -e 's/~>/\n   ~>/g'
}

set_test_opts_for_proofs() {
    proof_file="$1"
    local basename="$(basename -s -spec.k "$1")"
    local basepath="$(dirname "$1")/$basename"
    test_opts=( -cMODE=NORMAL "proofs/dummy-input.json" --prove "$proof_file-spec.k" )
}

run_make() {
    local make_opts=
    type pandoc-tangle >/dev/null 2>&1 || {
        make_opts="--assume-old ethereum.md --assume-old evm.md \
                   --assume-old data.md     --assume-old krypto.md \
                   --assume-old analysis.md --assume-old verification.md"
        warning "pandoc-tangle not installed."  \
                "Ignoring changes in markdown files\n"
    }
    make K_VERSION=${K_VERSION} -s $make_opts $@
}

# Test Filters and Lists
# ----------------------

filter_tests() {
    local command=( exit 1 )
    case $# in
    0) cat;       return ;;
    1) grep "$1"; return ;;
    *) cat > /dev/null;
       warning "Too many expressions";
       ;;
    esac
}

list_vmtests()      { find "tests/VMTests"      -name '*.json' | grep -v 'loop_stacklimit_1021' ; }
list_gas_analysis() { find "tests/gas-analysis" -name '*.evm' ; }
list_proofs()       { find "tests/proofs"       -name '*-spec.k' ; }
test_lists="vmtests gas_analysis proofs"

list_rvk()   { list_vmtests ; }
list_uiuck() { cat tests/short-list ; list_gas_analysis ; list_proofs ; }
list_all()   { list_$K_VERSION ; }
list_quick() { list_all | sort -R | head -n 20 ; }
test_lists="$test_lists rvk uiuck all quick"

# Runners
# -------

run_uiuck() {
    local run_file=$1; shift
    local test_opts=()
    export K_OPTS=-Xss500m
    export cSCHEDULE=${cSCHEDULE:-DEFAULT}
    case "$run_file" in
       *gas-analysis/*) test_opts=( -cMODE=GASANALYZE "$run_file" )           ;;
       *VMTests/*     ) test_opts=( -cMODE=VMTESTS    "$run_file" )           ;;
       *proofs/*      ) set_test_opts_for_proofs "$run_file"                  ;;
       *              ) die "Don't know how to set test_opts for '$run_file'" ;;
    esac
    krun --directory .build/$K_VERSION/ -cSCHEDULE=$cSCHEDULE "${test_opts[@]}" "$@"
}

run_krun() {
    run_make
    progress "running: $1"
    ( run_"$K_VERSION" "$1" | lint_krun_"$K_VERSION" )
}

run_kdebug() {
    [[ "$K_VERSION" == 'rvk' ]] && die "rvk does not support debugging"
    run_make
    progress "debugging: $1"
    ( run_"$K_VERSION" "$1" --debugger )
}

# Testers
# -------

test_uiuck() {
    test_file="$1"
    ( # Running in a sub-shell to avoid export spilling over to other tests
        pretty_diff --label expected <(cat "tests/templates/output-uiuck.txt") \
                    --label actual   <(run_uiuck "$test_file" | lint_krun_uiuck)
    )
}

test_rvk() {
    test_file="$1"
    (
        # TODO: Fix run_rvk and make this call that
        set +e;
        interpreter="$(dirname "$0")/.build/rvk/ethereum-kompiled/interpreter"
        kast="$(mktemp)"
        output="$(mktemp)"
        kast_output="$(mktemp)"
        trap "rm -rf $kast $output $kast_output" INT TERM EXIT
        "$(dirname "$0")/kast-json.py" "$test_file" > "$kast"
        $interpreter "$(dirname "$0")/.build/rvk/ethereum-kompiled/realdef.cma" -c PGM "$kast" textfile \
                     -c SCHEDULE '`DEFAULT_ETHEREUM`(.KList)' text -c MODE '`VMTESTS_ETHEREUM`(.KList)' text \
                     --output-file "$output"
        exit=$?
        if [ $exit -eq 0 ]; then
          exit 0
        fi
        k-bin-to-text "$output" "$kast_output"
        cat "$kast_output"
        printf "\n"
        exit $exit
    )
}

run_test() {
    run_make
    "test_$K_VERSION" "$@"
}

run_tests() {
    local test_count=0
    local test_failed=0
    while read test_file; do
        progress "running: $test_file"
        test_count=$(($test_count + 1))
        exit_status=0
        run_test "$test_file" || exit_status=$?
        if [[ $exit_status -eq 0 ]]; then
            success "$test_file"
        else
            failure "$test_file"
            test_failed=$(($test_failed + 1))
        fi
        progress "failed: $test_failed / $test_count"
    done
    return $test_failed
}

run_partests() {
    run_make
    [[ "$K_VERSION" == 'rvk'   ]] && mem_free=1G
    [[ "$K_VERSION" == 'uiuck' ]] && mem_free=2G
    parallel --joblog - --memfree "$mem_free" ./Build test
}

# Experimental
# ------------

test_proofs() {
    run_make build
    for hkg_proof in transferFrom-then transferFrom-else transfer-then transfer-else; do
        run_uiuck "test/proofs/hkg/$hkg_proof-spec.k"
    done
}

lint_krun_rvk() {
    rvk_output="$(mktemp)"
    trap "rm -rf $rvk_output" INT TERM EXIT
    k-bin-to-text <(cat -) "$rvk_output"
    cat "$rvk_output"
    rm -rf "$rvk_output"
}

run_rvk() {
    test_file="$1"
    interpreter="$(dirname "$0")/.build/rvk/ethereum-kompiled/interpreter"
    kast="$(mktemp)"
    trap "rm -rf $kast" INT TERM EXIT
    "$(dirname "$0")/kast-json.py" "$test_file" > "$kast"
    $interpreter "$(dirname "$0")/.build/rvk/ethereum-kompiled/realdef.cma" -c PGM "$kast" textfile \
                 -c SCHEDULE '`DEFAULT_ETHEREUM`(.KList)' text -c MODE '`VMTESTS_ETHEREUM`(.KList)' text
}


# Main
# ----

cd "$(dirname $0)"
progress "Using $K_VERSION"

test_logs="tests/logs"
mkdir -p "$test_logs"
now_passing="$test_logs/passing.lastrun"
ci_branches=( develop )

[[ "$#" == '0' ]] && set build
run_command="$1" ; shift
case "$run_command" in

    # Building
    tangle) K_VERSION=uiuck run_make tangle ; K_VERSION=rvk run_make tangle ;;
    build)  run_make all ;;

    # Running
    run)   run_krun   "$1" ;;
    test)  run_test   "$1" ;;
    debug) run_kdebug "$1" ;;

    # Testing
    list-*)    list_${run_command#list-}    | filter_tests "$@" ;;
    test-*)    list_${run_command#test-}    | filter_tests "$@" | run_tests    ;;
    partest-*) list_${run_command#partest-} | filter_tests "$@" | run_partests ;;
    both-*)    K_VERSION=rvk $0 ${run_command#both-} $@ && K_VERSION=uiuck $0 ${run_command#both-} ;;

    *)             echo "
    usage:
       $0       Defaults to '$0 build'

       # Building
       # --------
       $0 tangle    Only tangle the definitions/proofs
       $0 build     Tangle defintions/proofs and kompile

       # Running
       # -------
       $0 run   <pgm>   Run a single EVM program
       $0 test  <pgm>   Run a single EVM program like it's a test
       $0 debug <pgm>   Run a single EVM program in the debugger

       # Testing
       # -------
       $0 list-<test-list>    <regx>    List tests from <test-list> filtered by <regx>
       $0 test-<test-list>    <regx>    Run tests from <test-list> filtered by <regx>
       $0 partest-<test-list> <regx>    Run tests from <test-list> filtered by <regx> with GNU parallel
       $0 both-<command>      <regx>    Call '$0 <command> <regx>' for both RV-K and UIUC-K

       # Settings
       # --------
       Available <test-list>: $test_lists
       K_VERSION: $K_VERSION
"; exit ;;
esac
