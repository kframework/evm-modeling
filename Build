#!/usr/bin/env bash

set -e      # Exit immediately if any command fails

progress() { echo "== $@"; }
success()  { echo -e "\e[32m== success: $@\e[0m"; }
failure()  { echo -e "\e[31m== failure: $@\e[0m"; }

tests_dir="tests/tests-develop/VMTests"
passing_tests="tests/passing_tests"
output_file="tests/templates/output.txt"

list_tests() {
    for exp in "$@"; do
        if [[ -f "$exp" ]]; then
            echo $exp;
        else
            grep -Fvxf "$passing_tests" <(find "$tests_dir/" -iname "$exp" \
                            \( -name '*.json' -or -name '*.kson' \))
        fi
    done
}

run_test() {
    progress "running: $test_file ..."
    test_file="$1"
    output_file="tests/templates/output.txt"
    diff <(krun --debug --directory k/ "$test_file") "$output_file"
    if [[ "$?" == '0' ]]; then
        echo "$test_file" >> "$passing_tests"
        success "$test_file"
        return 0
    fi
    failure "$test_file"
    return 1
}

run_tests() {
    test_count=0
    test_fail_count=0
    list_tests "$@" | sort | while read test_file; do
        let test_count="$test_count + 1"
        run_test "$test_file" || let test_fail_count="$test_fail_count + 1"
        progress "failed: $test_fail_count / $test_count"
    done
    return $test_fail_count
}

tangle_ktest() {
    progress "running ktest ..."

    pushd k
    ktest ../tests/config.xml
    popd
}

have_tangle=true
check_for_tangle() {
    type pandoc-tangle >/dev/null 2>&1  || {
        have_tangle=false
        echo -e >&2 "Warning: pandoc-tangle not installed."  \
                   "Ignoring changes in markdown files\n"
    }
}

check_for_tangle
run_make() {
    local make_opts=
    $have_tangle || make_opts="--assume-old ethereum.md --assume-old evm.md \
                               --assume-old data.md --assume-old evm-dasm.md"
    make -s $make_opts $@
}

usage() {
    echo "
    usage:
       $0                  Build the definitions and kompile them
       $0 defn             Only detangle the definitions
       $0 test <test.json> krun the test file and check that it succeeds
       $0 test <expr>      Run list of tests output by '$0 list <expr>'
       $0 list <expr>      Use find to list files in '$tests_dir'
"
}

[[ "$#" == '0' ]] && set build
while [[ "$#" -gt '0' ]]; do
    tangle_command="$1" && shift
    case "$tangle_command" in
        build)        run_make build ;;
        defn)         run_make defn ;;
        test)         run_tests "$@" ; exit ;;
        ktest)        tangle_ktest ;;
        list)         list_tests "$@" ; exit ;;
        *)            usage; exit 1;;
    esac
done
