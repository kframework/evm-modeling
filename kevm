#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

check_k_install() {
    which kore-exec &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
    which kast &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
    which krun &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
}

INSTALL_BIN="$(dirname $0)"
INSTALL_LIB=${INSTALL_BIN}/../lib/kevm
INSTALL_K_BIN=${INSTALL_LIB}/kframework/bin

export PATH="$INSTALL_BIN:$INSTALL_LIB:$INSTALL_K_BIN:$PATH"
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}:/usr/local/lib

export K_OPTS="${K_OPTS:--Xmx16G -Xss512m}"

export KLAB_OUT="${KLAB_OUT:-~/.klab}"

# Runners
# -------

# User Commands

run_krun() {
    local cschedule cmode cchainid parser

    check_k_install

    case "$backend" in
        java)
            cschedule=$cSCHEDULE_kast
            cmode=$cMODE_kast
            cchainid=$cCHAINID_kast
            parser='printf %s'
            ;;
        *)
            cschedule=$cSCHEDULE_kore
            cmode=$cMODE_kore
            cchainid=$cCHAINID_kore
            parser='cat'
            ;;
    esac
    krun --directory "$backend_dir"                   \
         -cSCHEDULE="$cschedule" -pSCHEDULE="$parser" \
         -cMODE="$cmode"         -pMODE="$parser"     \
         -cCHAINID="$cchainid"   -pCHAINID="$parser"  \
         "$run_file" "$@"
}

run_kast() {
    local output_mode

    output_mode="${1:-kore}" ; shift

    case "$run_file-$output_mode" in
        *.json-kast) kast-json.py "$run_file" "$cSCHEDULE_kast" "$cMODE_kast" "$cCHAINID_kast"                  ;;
        *.json-kore) kore-json.py "$run_file" "$cSCHEDULE_kore" "$cMODE_kore" "$cCHAINID_kore"                  ;;
        *)           check_k_install ; kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@" ;;
    esac
}

run_prove() {
    local def_module run_dir additional_proof_args bug_report_name

    check_k_install

    def_module="$1" ; shift
    bug_report_name="kevm-bug-$(basename "${run_file%-spec.k}")"

    additional_proof_args=()
    ! $debug      || additional_proof_args+=(--debug)
    ! $repl       || additional_proof_args+=(--debugger --debug-script kast.kscript)
    ! $bug_report || additional_proof_args+=(--haskell-backend-command "kore-exec --bug-report $bug_report_name")

    ! $debug || set -x
    kprove --directory "$backend_dir" "$run_file" --def-module "$def_module" "${additional_proof_args[@]}" "$@"
}

run_search() {
    local search_pattern
    search_pattern="$1" ; shift
    run_krun --search --pattern "$search_pattern" "$@"
}

run_klab() {
    local run_mode klab_log def_module omit_cells omit_labels

    run_mode="$1" ; shift
    klab_log="$(basename "${run_file%-spec.k}")"

    def_module="$1" ; shift

    omit_cells='<substate> <jumpDests> <program> <code> <callGas> <touchedAccounts> <interimStates> <callStack> <callData> <block> <txOrder> <txPending> <messages>'
    omit_labels='#mkCall________EVM #callWithCode_________EVM #create_____EVM #mkCreate_____EVM #newAddrCreate2 #finishCodeDeposit___EVM'

    "$0" "$run_mode" --backend java "$run_file" "$def_module"                           \
        --state-log --state-log-path "$KLAB_OUT/data" --state-log-id "$klab_log"        \
        --state-log-events OPEN,REACHINIT,REACHTARGET,REACHPROVED,RULE,SRULE,NODE,CLOSE \
        --output-flatten "_Map_ #And"                                                   \
        --output-omit "$omit_cells $omit_labels"                                        \
        --no-alpha-renaming --restore-original-names --no-sort-collections              \
        --output json                                                                   \
        "$@"
}

view_klab() {
    local klab_log

    klab_log="$(basename "${run_file%-spec.k}")"

    # klab often runs out of stack space when running long-running KEVM programs
    # klab debug "$klab_log"
    KLAB_NODE_STACK_SIZE="${KLAB_NODE_STACK_SIZE:-300000}"
    node --max-old-space-size=4096 --stack-size=$KLAB_NODE_STACK_SIZE $(dirname $(which klab))/../libexec/klab-debug "$klab_log"
}

# Dev Commands

run_interpret() {
    local interpreter kast output output_text output_format exit_status

    interpreter="$backend_dir/driver-kompiled/interpreter"
    kast="$(mktemp)"
    output="$(mktemp)"
    output_text="$(mktemp)"
    trap "rm -rf $kast $output $output_text" INT TERM EXIT
    exit_status=0
    debugger=
    output_format='kore'
    case "$backend" in
        java)    run_kast kast > "$kast"
                 output_format='kast'
                 run_file="$kast"
                 run_krun --parser 'cat' --output kast > "$output" || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format"
                 fi
                 exit "$exit_status"
                 ;;

        llvm)    run_kast kore > "$kast"
                 if $debug; then debugger="gdb --args"; fi
                 $debugger "$interpreter" "$kast" -1 "$output" "$@" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        haskell) run_kast kore > "$kast"
                 kore-exec "$backend_dir/driver-kompiled/definition.kore" --pattern "$kast" --module ETHEREUM-SIMULATION --smt none --output "$output" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        *)      fatal "Bad backend for interpreter: '$backend'"
                ;;
    esac
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]] || [[ "$run_command" == '--help' ]] ; then
    echo "
        usage: $0 run          [--backend (llvm|java|haskell)]           <KEVM_arg>* <pgm>  <K arg>*
               $0 interpret    [--backend (llvm)] [--debug|--no-unparse] <KEVM_arg>* <pgm>  <interpreter arg>*
               $0 interpret    [--backend (java|haskell)] [--no-unparse] <KEVM_arg>* <pgm>
               $0 kast         [--backend (llvm|java|haskell)]           <KEVM_arg>* <pgm>  <output format> <K arg>*
               $0 prove        [--backend (java|haskell)]                            <spec> <def_module> <K arg>*
               $0 search       [--backend (java|haskell)]                            <pgm>  <pattern> <K arg>*
               $0 klab-run                                                           <pgm>  <K arg>*
               $0 klab-prove                                                         <spec> <def_module> <K arg>*
               $0 klab-view                                                          <spec>

               $0 [help|--help|version|--version]

           $0 run       : Run a single EVM program
           $0 interpret : Run JSON EVM programs without K Frontend (external parser)
           $0 kast      : Parse an EVM program and output it in a supported format
           $0 prove     : Run an EVM K proof
           $0 search    : Search for a K pattern in an EVM program execution
           $0 klab-(run|prove) : Run program or prove spec and dump StateLogs which KLab can read
           $0 klab-view : View the statelog associated with a given program or spec

           $0 help    : Display this help message.
           $0 version : Display the versions of KEVM, K, Kore, and Z3 in use.

           Note: <pgm> is a path to a file containing an EVM program/test.
                 <spec> is a K specification to be proved.
                 <KEVM arg> is one of [--mode (NORMAL|VMTESTS)]
                                      [--schedule (ISTANBUL|PETERSBURG|CONSTANTINOPLE|BYZANTIUM|SPURIOUS_DRAGON|TANGERINE_WHISTLE|HOMESTEAD|FRONTIER|DEFAULT)]
                                      [--chainid NNN]
                 <K arg> is an argument you want to pass to K.
                 <interpreter arg> is an argument you want to pass to the derived interpreter.
                 <output format> is the format for Kast to output the term in.
                 <pattern> is the configuration pattern to search for.
                 <def_module> is the module to take as axioms when doing verification.

           klab-view: Make sure that the 'klab/bin' directory is on your PATH to use this option.
    "
    exit 0
fi

if [[ "$run_command" == 'version' ]] || [[ "$run_command" == '--version' ]]; then
    notif "KEVM Version"
    cat $INSTALL_LIB/version
    exit 0
fi

backend="llvm"
debug=false
dump=false
unparse=true
repl=false
bug_report=false
mode=NORMAL
schedule=ISTANBUL
chainid=1
[[ ! "$run_command" == 'prove' ]] || backend='java'
[[ ! "$run_command" =~ klab*   ]] || backend='java'
kevm_port='8545'
kevm_host='127.0.0.1'
args=()
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --debug)              debug=true ; args+=("$1") ; shift   ;;
        --dump)               dump=true                 ; shift   ;;
        --no-unparse)         unparse=false             ; shift   ;;
        --repl)               repl=true                 ; shift   ;;
        --bug-report)         bug_report=true           ; shift   ;;
        --backend)            backend="$2"              ; shift 2 ;;
        --backend-dir)        backend_dir="$2"          ; shift 2 ;;
        --mode)               mode="$2"                 ; shift 2 ;;
        --schedule)           schedule="$2"             ; shift 2 ;;
        --chainid)            chainid="$2"              ; shift 2 ;;
        -p|--port)            kevm_port="$2"            ; shift 2 ;;
        -h|--host|--hostname) kevm_host="$2"            ; shift 2 ;;
        *)                    args+=("$1")              ; shift   ;;
    esac
done
set -- "${args[@]}"
backend_dir="${backend_dir:-$INSTALL_LIB/$backend}"

! $repl || [[ "$backend" == haskell ]] || fatal "Option --repl only usable with --backend haskell!"

# get the run file
run_file="$1" ; shift
if [[ "$run_file" == '-' ]]; then
    tmp_input="$(mktemp)"
    trap "rm -rf $tmp_input" INT TERM EXIT
    cat - > "$tmp_input"
    run_file="$tmp_input"
fi
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

cMODE_kore="Lbl${mode}{}()"
cSCHEDULE_kore="Lbl${schedule}'Unds'EVM{}()"
cCHAINID_kore="\dv{SortInt{}}(\"${chainid}\")"

cMODE_kast="\`${mode}\`(.KList)"
cSCHEDULE_kast="\`${schedule}_EVM\`(.KList)"
cCHAINID_kast="#token(\"${chainid}\",\"Int\")"

case "$run_command-$backend" in
    run-@(java|llvm|haskell)       ) run_krun                        "$@" ;;
    kast-@(java|llvm|haskell)      ) run_kast                        "$@" ;;
    interpret-@(llvm|haskell|java) ) run_interpret                   "$@" ;;
    prove-@(java|haskell)          ) run_prove                       "$@" ;;
    search-@(java|haskell)         ) run_search                      "$@" ;;
    klab-@(run|prove)-java         ) run_klab "${run_command#klab-}" "$@" ;;
    klab-view-java                 ) view_klab                       "$@" ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
