#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

# https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
kevm_script="$0"
while [[ -h "$kevm_script" ]]; do
    kevm_dir="$(cd -P "$(dirname "$kevm_script")" && pwd)"
    kevm_script="$(readlink "$kevm_script")"
    [[ "$kevm_script" != /* ]] && kevm_script="$kevm_dir/$kevm_script"
done
kevm_dir="$(cd -P "$(dirname "$kevm_script")" && pwd)"
build_dir="$kevm_dir/.build"
release_dir="${K_BIN:-$build_dir/k/k-distribution/target/release/k}"
lib_dir="$build_dir/local/lib"

export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
export LD_LIBRARY_PATH="$release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"

test_logs="$build_dir/logs"
mkdir -p "$test_logs"
test_log="$test_logs/tests.log"

klab_dir="$build_dir/klab"

# Utilities
# ---------

progress() { echo "== $@" ; }
warning()  { echo -e "WARNING:" "$@" >&2 ; }
die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index --ignore-all-space "$@"
}

# Runners
# -------

# User Commands

run_krun() {
    local run_file=$1 ; shift
    export K_OPTS=-Xss500m
    case "$backend" in
        ocaml) args=(--interpret) ;;
        *)     args=()            ;;
    esac
    krun --directory "$backend_dir" -cSCHEDULE="$cSCHEDULE" -pSCHEDULE='printf %s' -cMODE="$cMODE" -pMODE='printf %s' "$run_file" "${args[@]-}" "$@"
}

run_proof() {
    local proof_file="$1" ; shift
    [[ -f "$proof_file" ]] || die "$proof_file does not exist"
    export K_OPTS=-Xmx8G
    case "$backend" in
        *) args=() ;;
    esac
    kprove --directory "$backend_dir" "$proof_file" --def-module VERIFICATION "${args[@]-}" "$@"
}

run_klab() {
    local run_mode run_file

    run_mode="$1" ; shift
    run_file="$1" ; shift

    $0 "$run_mode" --backend java "$run_file" \
        --state-log --state-log-path "$klab_dir/data" --state-log-id klab-statelog \
        --state-log-events OPEN,EXECINIT,SEARCHINIT,REACHINIT,REACHTARGET,REACHPROVED,NODE,RULE,SRULE,RULEATTEMPT,IMPLICATION,Z3QUERY,Z3RESULT,CLOSE \
        --output-flatten "_Map_ #And" \
        --output-tokenize "_;__EVM" \
        --output-omit "<programBytes> <program> <code> <previousGas> <touchedAccounts> <interimStates> <callStack> <callData>" \
        --no-alpha-renaming --restore-original-names --no-sort-collections \
        --output json \
        "$@" \
        >/dev/null || true

    export KLAB_OUT="$klab_dir"
    klab debug klab-statelog
}

# Dev Commands

run_interpret() {
    local test_file interpreter kast output exit_status

    test_file="$1" ; shift
    interpreter="$build_dir/$backend/driver-kompiled/interpreter"
    kast="$(mktemp)"
    output="$(mktemp)"
    trap "rm -rf $kast $output" INT TERM EXIT
    exit_status=0
    case "$backend" in
        ocaml)  "$kevm_dir/kast-json.py" "$test_file" > "$kast"
                "$interpreter" "$build_dir/ocaml/driver-kompiled/realdef.cma" -c PGM "$kast" textfile \
                             -c SCHEDULE "$cSCHEDULE" text -c MODE "$cMODE" text \
                             --output-file "$output" \
                    || exit_status="$?"
                ;;

        llvm)   "$kevm_dir/kore-json.py" "$test_file" "$cSCHEDULE" "$cMODE" > "$kast"
                "$interpreter" "$kast" -1 "$output" \
                    || exit_status="$?"
                ;;

        *)      die "Bad backend for interpreter: '$backend'"
                ;;
    esac
    if [[ "$exit_status" != '0' ]]; then
        cat "$output"
        exit "$exit_status"
    fi
}

run_test() {
    local test_file test_log_name output_file expected_file

    test_file="$1" ; shift

    test_log_name="$test_logs/$test_file"
    mkdir -p "$(dirname "$test_log_name")"

    output_file="$test_log_name.out"

    if [[ -f "$test_file.out" ]]; then
        expected_file="$test_file.out"
    else
        expected_file="tests/templates/output-success-$backend.json"
    fi

    case "$test_file" in
        *specs/*)
            run_proof "$test_file" "$@"
            ;;
        *interactive/*)
            run_krun "$test_file" "$@" > "$output_file" \
                || pretty_diff "$expected_file" "$output_file"
            ;;
        *)
            case "$backend" in
                java|haskell)
                    run_krun "$test_file" "$@" > "$output_file" \
                        || pretty_diff "$expected_file" "$output_file"
                    ;;
                ocaml|llvm)
                    run_interpret "$test_file"
                    ;;
                *)
                    die "Cannot test file '$test_file' with '$backend' backend!"
                    ;;
            esac
            ;;
    esac
}

# Main
# ----

run_command="$1" ; shift

backend="ocaml"
[[ ! "$run_command" == 'prove' ]] || backend='java'
[[ ! "$run_command" =~ klab*   ]] || backend='java'
if [[ $# -gt 0 ]] && [[ $1 == '--backend' ]]; then
    backend="$2"
    shift 2
fi
backend_dir="$build_dir/$backend"
[[ ! "$backend" == "ocaml" ]] || eval $(opam config env)

cMODE="\`${MODE:-NORMAL}\`(.KList)"
cSCHEDULE="\`${SCHEDULE:-BYZANTIUM}_EVM\`(.KList)"

case "$run_command-$backend" in

    # Running
    run-@(ocaml|java|llvm|haskell)  ) run_krun                        "$@" ;;
    interpret-@(ocaml|llvm)         ) run_interpret                   "$@" ;;
    prove-@(java|haskell)           ) run_proof                       "$@" ;;
    test-@(ocaml|java|llvm|haskell) ) run_test                        "$@" ;;
    klab-@(run|prove)-java          ) run_klab "${run_command#klab-}" "$@" ;;

    *) echo "
    usage: $0 (run|test) [--backend (ocaml|java|llvm|haskell)] <pgm>  <K args>*
           $0 interpret  [--backend (ocaml|llvm)]              <pgm>
           $0 prove      [--backend (java|haskell)]            <spec> <K args>*
           $0 klab-(run|prove)                                 <spec> <K args>*

       $0 run       : Run a single EVM program
       $0 test      : Run a single EVM program like it's a test
       $0 interpret : Run JSON EVM programs without K Frontend (external parser)
       $0 prove     : Run an EVM K proof
       $0 klab-(run|prove) : Run or prove a spec and launch KLab on the execution graph.

       Note: <pgm> is a path to a file containing an EVM program/test.
             <spec> is a K specification to be proved.
             <K args> are any arguments you want to pass to K when executing/proving.

       KLab: Make sure that the 'klab/bin' directory is on your PATH to use this option.
" ; exit ;;
esac
