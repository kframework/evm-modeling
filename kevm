#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

curdir="$(pwd)"

# https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
kevm_script="$0"
while [[ -h "$kevm_script" ]]; do
    kevm_dir="$(cd -P "$(dirname "$kevm_script")" && pwd)"
    kevm_script="$(readlink "$kevm_script")"
    [[ "$kevm_script" != /* ]] && kevm_script="$kevm_dir/$kevm_script"
done
kevm_dir="$(cd -P "$(dirname "$kevm_script")" && pwd)"

build_dir="$kevm_dir/.build"
lib_dir="$build_dir/local/lib"

k_submodule="$kevm_dir/deps/k"
release_dir="${K_BIN:-$k_submodule/k-distribution/target/release/k}"

export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
export LD_LIBRARY_PATH="$release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"

test_logs="$build_dir/logs"
mkdir -p "$test_logs"
test_log="$test_logs/tests.log"

KLAB_OUT="${KLAB_OUT:-$build_dir/klab}"
KLAB_NODE_STACK_SIZE="${KLAB_NODE_STACK_SIZE:-30000}"
export KLAB_OUT

# Utilities
# ---------

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index --ignore-all-space "$@"
}

# Runners
# -------

# User Commands

run_krun() {
    export K_OPTS=-Xss500m
    case "$backend" in
        ocaml) args=(--interpret) ;;
        *)     args=()            ;;
    esac
    krun --directory "$backend_dir" -cSCHEDULE="$cSCHEDULE" -pSCHEDULE='printf %s' -cMODE="$cMODE" -pMODE='printf %s' "$run_file" "${args[@]-}" "$@"
}

run_kast() {
    local output_mode

    output_mode="${1:-kast}" ; shift

    case "$run_file-$output_mode" in
        *.json-@(kast|kore)) "$kevm_dir/$output_mode-json.py" "$run_file" "$cSCHEDULE" "$cMODE"       ;;
        *-kore)              kast --directory "$backend_dir" "$run_file" --kore                  "$@" ;;
        *)                   kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@" ;;
    esac
}

run_prove() {
    export K_OPTS=-Xmx8G
    kprove --directory "$backend_dir" "$run_file" "$@"
}

run_klab() {
    local run_mode rel_run_file klab_log

    run_mode="$1" ; shift
    rel_run_file="${run_file#$curdir}"
    klab_log="$(basename "${rel_run_file%-spec.k}")"

    "$0" "$run_mode" --backend java "$rel_run_file" \
        --state-log --state-log-path "$KLAB_OUT/data" --state-log-id "$klab_log" \
        --state-log-events OPEN,EXECINIT,SEARCHINIT,REACHINIT,REACHTARGET,REACHPROVED,NODE,RULE,SRULE,RULEATTEMPT,IMPLICATION,Z3QUERY,Z3RESULT,CLOSE \
        --output-flatten "_Map_ #And" \
        --output-tokenize "_;__EVM ___EVM ____EVM _____EVM" \
        --output-omit "<programBytes> <program> <code> <callGas> <touchedAccounts> <interimStates> <callStack> <callData>" \
        --no-alpha-renaming --restore-original-names --no-sort-collections \
        --output json \
        "$@"
}

view_klab() {
    local rel_run_file

    rel_run_file="${run_file#$curdir}"
    klab_log="$(basename "${rel_run_file%-spec.k}")"

    # klab often runs out of stack space when running long-running KEVM programs
    # klab debug "$klab_log"
    node --stack-size=$KLAB_NODE_STACK_SIZE $(dirname $(which klab))/../libexec/klab-debug "$klab_log"
}

# Dev Commands

run_interpret() {
    local interpreter kast output output_kast exit_status

    interpreter="$backend_dir/driver-kompiled/interpreter"
    kast="$(mktemp)"
    output="$(mktemp)"
    output_kast="$(mktemp)"
    trap "rm -rf $kast $output $output_kast" INT TERM EXIT
    exit_status=0
    case "$backend" in
        ocaml)  run_kast kast > "$kast"
                "$interpreter" "$backend_dir/driver-kompiled/realdef.cma" -c PGM "$kast" textfile \
                             -c SCHEDULE "$cSCHEDULE" text -c MODE "$cMODE" text --initializer 'initKevmCell' \
                             --output-file "$output" "$@" \
                    || exit_status="$?"
                ;;

        llvm)   run_kast kore > "$kast"
                "$interpreter" "$kast" -1 "$output" "$@" \
                    || exit_status="$?"
                ;;

        *)      fatal "Bad backend for interpreter: '$backend'"
                ;;
    esac
    if [[ "$exit_status" != '0' ]]; then
        k-bin-to-text "$output" "$output_kast"
        cat "$output_kast"
        exit "$exit_status"
    fi
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]]; then
    echo "
        usage: $0 run        [--backend (ocaml|java|llvm|haskell)] <pgm>  <K arg>*
               $0 interpret  [--backend (ocaml|llvm)]              <pgm>  <interpreter arg>*
               $0 kast       [--backend (ocaml|java)]              <pgm>  <output format> <K arg>*
               $0 prove      [--backend (java|haskell)]            <spec> <K arg>* -m <def_module>
               $0 klab-run                                         <pgm>  <K arg>*
               $0 klab-prove                                       <spec> <K arg>* -m <def_module>
               $0 klab-view                                        <spec>

           $0 run       : Run a single EVM program
           $0 interpret : Run JSON EVM programs without K Frontend (external parser)
           $0 prove     : Run an EVM K proof
           $0 klab-(run|prove) : Run program or prove spec and dump StateLogs which KLab can read
           $0 klab-view : View the statelog associated with a given program or spec

           Note: <pgm> is a path to a file containing an EVM program/test.
                 <spec> is a K specification to be proved.
                 <K arg> is an argument you want to pass to K.
                 <interpreter arg> is an argument you want to pass to the derived interpreter.
                 <output format> is the format for Kast to output the term in.
                 <def_module> is the module to take as axioms when doing verification.

           klab-view: Make sure that the 'klab/bin' directory is on your PATH to use this option.
    "
    exit 0
fi

backend="ocaml"
[[ ! "$run_command" == 'prove' ]] || backend='java'
[[ ! "$run_command" =~ klab*   ]] || backend='java'
if [[ $# -gt 0 ]] && [[ $1 == '--backend' ]]; then
    backend="$2"
    shift 2
fi
backend_dir="$build_dir/$backend"
[[ ! "$backend" == "ocaml" ]] || eval $(opam config env)

# get the run file
run_file="$curdir/$1" ; shift
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

cMODE="\`${MODE:-NORMAL}\`(.KList)"
cSCHEDULE="\`${SCHEDULE:-BYZANTIUM}_EVM\`(.KList)"

case "$run_command-$backend" in

    # Running
    run-@(ocaml|java|llvm|haskell)  ) run_krun                        "$@" ;;
    kast-@(ocaml|java|llvm|haskell) ) run_kast                        "$@" ;;
    interpret-@(ocaml|llvm)         ) run_interpret                   "$@" ;;
    prove-@(java|haskell)           ) run_prove                       "$@" ;;
    klab-@(run|prove)-java          ) run_klab "${run_command#klab-}" "$@" ;;
    klab-view-*                     ) view_klab                       "$@" ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
