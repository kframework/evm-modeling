#!/usr/bin/env bash

set -e      # Exit immediately if any command fails
set -u      # Using undefined variables is an error. Exit immediately

# Utilities
# ---------

progress() { echo "== $@" ; }
warning()  { echo -e "WARNING:" "$@" >&2 ; }
die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }
success()  { echo -e "\e[32m== success: $@\e[0m" ;
             echo "$@" >> "$now_passing"
           }
failure()  { echo -e "\e[31m== failure: $@\e[0m" ; }

pretty_diff() {
    git --no-pager diff --no-index "$@"
}

# Environment Setup
# -----------------

run_env() {
    local run_file=$1
    local cmode="${cMODE:-NORMAL}"
    local cschedule="${cSCHEDULE:-DEFAULT}"
    local build_dir="$(pwd)/.build"
    local release_dir="${K_BIN:-$build_dir/k/k-distribution/target/release/k}"
    local lib_dir="$build_dir/local/lib"
    case "$run_file" in
       tests/interactive/gas-analysis/*      ) cmode="GASANALYZE" ;;
       tests/ethereum-tests/VMTests/*        ) cmode="VMTESTS"    ;;
       tests/ethereum-tests/BlockchainTests/*) cmode="NORMAL"     ;;
       tests/proofs/*                        ) cmode="NORMAL"     ;;
    esac
    export cMODE="\`${cmode}\`(.KList)"
    export cSCHEDULE="\`${cschedule}_EVM\`(.KList)"
    export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
    export LD_LIBRARY_PATH="$release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"
    eval $(opam config env)
}

# Runners
# -------

run_krun() {
    local backend=$1  ; shift
    local run_file=$1 ; shift
    run_env "$run_file"
    export K_OPTS=-Xss500m
    krun --directory .build/$backend/ -cSCHEDULE="$cSCHEDULE" -pSCHEDULE='printf %s' -cMODE="$cMODE" -pMODE='printf %s' "$run_file" "$@"
}

run_interpreter() {
    test_file="$1"
    output_expected_file="$2"
    run_env "$test_file"
    (   set +e
        interpreter="$(dirname "$0")/.build/ocaml/driver-kompiled/interpreter"
        kast="$(mktemp)"
        output="$(mktemp)"
        kast_output="$(mktemp)"
        trap "rm -rf $kast $output $kast_output" INT TERM EXIT
        "$(dirname "$0")/kast-json.py" "$test_file" > "$kast"
        set +e
        $interpreter "$(dirname "$0")/.build/ocaml/driver-kompiled/realdef.cma" -c PGM "$kast" textfile \
                     -c SCHEDULE "$cSCHEDULE" text -c MODE "$cMODE" text \
                     --output-file "$output"
        exit_status="$?"
        [[ "$exit_status" == '0' ]] && exit 0
        k-bin-to-text "$output" "$kast_output"
        pretty_diff "$output_expected_file" "$kast_output"
        printf "\n"
        exit "$exit_status"
    )
}

run_bugcheck() {
    progress "bug-checking: $1"
    input_file="$1"
    ( run_krun bug-checker "$1" --search )
}

run_proof() {
    local proof_file="$1" ; shift
    [[ -f "$proof_file" ]] || die "$proof_file does not exist"
    run_env "$proof_file"
    export K_OPTS=-Xmx2G
    ( kprove --directory .build/java/ --z3-executable "$proof_file" --def-module VERIFICATION )
}

run_kdebug() {
    progress "debugging: $1"
    ( run_krun java "$1" --debugger )
}

run_test() {
    test_file="$1"; shift
    case "$test_file" in
        *proofs/*     ) ( local output_expected_file="tests/templates/proof-success.txt"
                          local output_file="$(mktemp "$test_file.out.XXXXXX")"
                          trap "rm -rf $output_file" INT TERM EXIT
                          run_proof "$test_file" "$@" > "$output_file"
                          pretty_diff "$output_expected_file" "$output_file"
                        )
                        ;;
        *bug-checker/*) [[ -f "$test_file.out" ]] && output_expected_file="$test_file.out"
                        ( local output_file="$(mktemp "$output_expected_file.XXXXXX")"
                          trap "rm -rf $output_file" INT TERM EXIT
                          run_bugcheck "$test_file" "$@" > "$output_file"
                          pretty_diff "$output_expected_file" "$output_file"
                        )
                        ;;
        *interactive/*) [[ -f "$test_file.out" ]] && output_expected_file="$test_file.out"
                        ( local output_file="$(mktemp "$output_expected_file.XXXXXX")"
                          trap "rm -rf $output_file" INT TERM EXIT
                          run_krun ocaml "$test_file" --interpret "$@" > "$output_file" || true
                          pretty_diff "$output_expected_file" "$output_file"
                        )
                        ;;
        *             ) output_expected_file=tests/templates/output-success.txt
                        [[ -f "$test_file.out" ]] && output_expected_file="$test_file.out"
                        run_interpreter "$test_file" "$output_expected_file"
                        ;;
    esac
}

# Main
# ----

cd "$(dirname $0)"

# test logs
test_logs=".build/logs"
mkdir -p "$test_logs"
now_passing="$test_logs/passing.lastrun"

# main functionality
run_command="$1" ; shift
case "$run_command" in

    # Running
    run)      run_krun     ocaml "$@" --interpret ;;
    debug)    run_kdebug         "$@"             ;;
    bugcheck) run_bugcheck       "$@"             ;;

    prove) run_proof "$@" ;;

    # Testing
    test)  run_test   "$@" ;;

    *) echo "
    usage: $0 <cmd> <file> <K args>*

       # Running
       # -------
       $0 run      <pgm>   Run a single EVM program
       $0 debug    <pgm>   Run a single EVM program in the debugger
       $0 bugcheck <pgm>   Check for a fixed set of EVM program problems

       $0 prove <spec>  Attempt to prove the specification using K's RL prover

       Note: <pgm> and <spec> here are paths to files.
       These files should be Ethereum programs/specifications.

       Examples:
       $ $0 run   tests/ethereum-tests/VMTests/vmArithmeticTest/add0.json
       $ $0 debug tests/gas-analysis/sumTo10.evm
       $ $0 prove tests/proofs/specs/examples/sum-to-n-spec.k

       # Testing
       # -------
       $0 test <pgm>    Run a single EVM program like it's a test

       Note: This command is more for devs and CI servers.
" ; exit ;;
esac
