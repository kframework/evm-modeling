[totalSupply]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
callData: #abiCallData("totalSupply", .TypedArgs)
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(TOTAL, 32) ]
      _:Map
    )
gas: {gascap} => _
log: _
refund: _
storage:
    #hashedLocation({lang}, {pos(totalsupply)}, .IntList) |-> TOTAL
    _:Map
requires:
    andBool 0 <=Int TOTAL     andBool TOTAL     <Int (2 ^Int 256)
comments:

[balanceOf]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
callData: #abiCallData("balanceOf", #address(OWNER))
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(BAL, 32) ]
      _:Map
    )
gas: {gascap} => _
log: _
refund: _
storage:
    #hashedLocation({lang}, {pos(balances)}, OWNER) |-> BAL
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int BAL       andBool BAL       <Int (2 ^Int 256)
comments:

[allowance]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(ALLOWANCE, 32) ]
      _:Map
    )
gas: {gascap} => _
log: _
refund: _
storage:
    #hashedLocation({lang}, {pos(allowances)}, OWNER SPENDER) |-> ALLOWANCE
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)
comments:

[approve]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(1, 32) ]
      _:Map
    )
gas: {gascap} => _
log:
      _:List
    (
      .List
    =>
      ListItem({ ACCT_ID
               | #parseHexWord(Keccak256(#generateSignature("Approval", #address(CALLER_ID), #address(SPENDER), #uint256(VALUE))))
               : CALLER_ID
               : SPENDER
               : .WordStack
               | #asByteStackInWidth(VALUE, 32)
               })
    )
refund: _ => _
storage:
    #hashedLocation({lang}, {pos(allowances)}, CALLER_ID SPENDER) |-> (_:Int => VALUE)
    _:Map
requires:
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
comments:
    // NOTE: negative VALUE is not possible since it is of `num256` type

[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
gas: {gascap} => _
refund: _ => _
requires:
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)

[transfer-success]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(1, 32) ]
      _:Map
    )
log:
      _:List
    (
      .List
    =>
      ListItem({ ACCT_ID
               | #parseHexWord(Keccak256(#generateSignature("Transfer", #address(CALLER_ID), #address(TO_ID), #uint256(VALUE))))
               : CALLER_ID
               : TO_ID
               : .WordStack
               | #asByteStackInWidth(VALUE, 32)
               })
    )
comments:
    // NOTE: negative VALUE is not possible since it is of `num256` type

[transfer-success-1]
storage:
    #hashedLocation({lang}, {pos(balances)}, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({lang}, {pos(balances)}, TO_ID)     |-> (BAL_TO   => BAL_TO  +Word VALUE)
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE >Int 0

[transfer-success-2]
storage:
    #hashedLocation({lang}, {pos(balances)}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE >Int 0

[transfer-failure]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(0, 32) ]
      _:Map
    )
log: _
comments:
    // TODO: properly consider exception preserving the input status
    //       using CALL GCAP ACCTTO VALUE ARGSTART ARGWIDTH RETSTART RETWIDTH
    // NOTE: negative VALUE is not possible since it is of `num256` type

[transfer-failure-1]
storage:
    #hashedLocation({lang}, {pos(balances)}, CALLER_ID) |-> (BAL_FROM => _)
    #hashedLocation({lang}, {pos(balances)}, TO_ID)     |->  BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   VALUE <=Int 0 )

[transfer-failure-2]
storage:
    #hashedLocation({lang}, {pos(balances)}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   VALUE <=Int 0 )

[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
gas: {gascap} => _
refund: _ => _
requires:
    andBool 0 <=Int FROM_ID   andBool FROM_ID   <Int (2 ^Int 160)
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int ALLOW     andBool ALLOW     <Int (2 ^Int 256)

[transferFrom-success]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(1, 32) ]
      _:Map
    )
log:
      _:List
    (
      .List
    =>
      ListItem({ ACCT_ID
               | #parseHexWord(Keccak256(#generateSignature("Transfer", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))))
               : FROM_ID
               : TO_ID
               : .WordStack
               | #asByteStackInWidth(VALUE, 32)
               })
    )
comments:
    // NOTE: negative VALUE is not possible since it is of `num256` type

[transferFrom-success-1]
storage:
    #hashedLocation({lang}, {pos(balances)},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({lang}, {pos(balances)},   TO_ID)             |-> (BAL_TO   => BAL_TO  +Word VALUE)
    #hashedLocation({lang}, {pos(allowances)}, FROM_ID CALLER_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool VALUE >Int 0

[transferFrom-success-2]
storage:
    #hashedLocation({lang}, {pos(balances)},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({lang}, {pos(allowances)}, FROM_ID CALLER_ID) |-> (ALLOW => ALLOW -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool VALUE >Int 0

[transferFrom-failure]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
localMem:
      .Map
    =>
    (
      .Map[ RET_ADDR := #asByteStackInWidth(0, 32) ]
      _:Map
    )
log: _
comments:
    // TODO: properly consider exception preserving the input status
    //       using CALL GCAP ACCTTO VALUE ARGSTART ARGWIDTH RETSTART RETWIDTH
    // NOTE: negative VALUE is not possible since it is of `num256` type

[transferFrom-failure-1]
storage:
    #hashedLocation({lang}, {pos(balances)},   FROM_ID)           |-> (BAL_FROM => _)  // BAL_FROM
    #hashedLocation({lang}, {pos(balances)},   TO_ID)             |-> (BAL_TO   => _)  // BAL_TO
    #hashedLocation({lang}, {pos(allowances)}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   VALUE >Int ALLOW
     orBool   VALUE <=Int 0 )

[transferFrom-failure-2]
storage:
    #hashedLocation({lang}, {pos(balances)},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({lang}, {pos(allowances)}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   VALUE >Int ALLOW
     orBool   VALUE <=Int 0 )
